#include "BlockDebug.h"
#include "Debug.h"

module BlockAppP @safe() {

	uses {
		interface Boot;
		interface Leds;
		interface Timer<TMilli>;

		interface SplitControl as SerialControl;
		interface SplitControl as RadioControl;

		interface BlockSend;
		interface Receive;
		interface PacketAcknowledgements as Acks;
		interface NeighborTable;

		interface TimeMeasure<uint32_t>;		
	}

} implementation {

	message_t messageBuffer[BUFFER_SIZE];
	message_t* ONE_NOK messages[BUFFER_SIZE];

	/********** Init **********/

	event void Boot.booted() {
		uint8_t i;
		//printf("%i: booted\n", TOS_NODE_ID);
		for(i=0; i<BUFFER_SIZE; i++) {
			messages[i] = &messageBuffer[i];
		}
		call SerialControl.start();
		call RadioControl.start();
		call NeighborTable.insert(TOS_NODE_ID+1);
		call NeighborTable.insert(TOS_NODE_ID-1);
	}
 
	event void SerialControl.startDone(error_t error) {
		if(error!=SUCCESS) {
			call SerialControl.start();
		}
	}

	event void SerialControl.stopDone(error_t error) {

	}

	event void RadioControl.startDone(error_t error) {
		if(error==SUCCESS) {
			if(TOS_NODE_ID!=RECEIVER_ID) {
				call Timer.startPeriodic(PERIOD);
			}
		} else {
			call RadioControl.start();
		}
	}

	event void RadioControl.stopDone(error_t error) {

	}

	/********** Send **********/

	event void Timer.fired() {

		//time_stop();
		//printf("%hu: quite %lu\n", TOS_NODE_ID, time_get());

		if(call BlockSend.send(TOS_NODE_ID-1, messages, BUFFER_SIZE, sizeof(blockapp_msg_t))!=SUCCESS) {
			//call Leds.led0Toggle();
		} else {
			call TimeMeasure.start();
		}
	}

  event void BlockSend.sendDone(message_t** msgs, error_t error) {
		uint8_t i;

		call TimeMeasure.stop();

		if(error==SUCCESS) {
			//printf("%i %s: send success\n",TOS_NODE_ID, __FUNCTION__);
			call Leds.led1Toggle();
		} else {
			//printf("%i %s: send failed\n",TOS_NODE_ID, __FUNCTION__);
			call Leds.led0Toggle();
		}

		printf("%hhu: ", TOS_NODE_ID);

		for(i=0; i<BUFFER_SIZE; i++) {
			printf("%hhu", call Acks.wasAcked(messages[i]));
		}

		printf(", time=%lu, quick=%lu\n", call TimeMeasure.get(), time_get());

		printfflush();
		debug_flush();
		//time_start();
	}

	/********** Receive **********/

  event message_t* Receive.receive(message_t* msg, void* payload, uint8_t len) {
		call Leds.led2Toggle();
		//printf("received\n");
		printfflush();
		debug_flush();
		return msg;
	}

	/********** NeighborTable **********/
	
	event void NeighborTable.evicted(am_addr_t addr) {

	}

}
